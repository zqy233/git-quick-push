import{Command as p}from"commander";import g from"ora";import r from"shelljs";import i from"@darkobits/lolcatjs";import o from"inquirer";const s=[{emoji:":tada:",commit:"first commit "},{emoji:":sparkles:",commit:"new feature "},{emoji:":bug:",commit:"fix bug "},{emoji:":lipstick:",commit:"update ui and style files "},{emoji:":fire:",commit:"remove code or file "},{emoji:":art:",commit:"improve code structure or code format "},{emoji:":zap:",commit:"improve performance "},{emoji:":memo:",commit:"document writing "}],u=s.map(t=>t.emoji),a=s.map(t=>t.commit),m=t=>{const e=g("").start();r.exec(t),e.succeed("command finished"),c()},f=async()=>{const{type:t}=await o.prompt([{type:"list",name:"type",message:i.fromString("please select the command"),choices:["git checkout","git checkout -b"]}]),{input:e}=await o.prompt([{type:"input",name:"input",message:i.fromString("input branch name :")}]);m(`${t} ${e}`)},l=async()=>{r.exec("git add .");const{type:t}=await o.prompt([{type:"list",name:"type",message:i.fromString("please select the commit category"),choices:a}]),{input:e}=await o.prompt([{type:"input",name:"input",message:i.fromString("full details :")}]);m(`git commit -m "${u[a.indexOf(t)]}${e?t+": "+e:t}"`)},h=async()=>{const{type:t}=await o.prompt([{type:"list",name:"type",message:i.fromString("select remote command"),choices:["git remote -v","git remote add origin","git remote set-url origin"]}]);if(t==="git remote -v")return m(t);const{input:e}=await o.prompt([{type:"input",name:"input",message:i.fromString("repository url:")}]);m(`${t} ${e}`)},d=async()=>{const{type:t}=await o.prompt([{type:"list",name:"type",message:i.fromString("select push command"),choices:["git push -u","git push"]}]);if(t==="git push")return m(t);const{input:e}=await o.prompt([{type:"input",name:"input",message:i.fromString("repository name and branch name:")}]);m(`${t} ${e}`)},y=async()=>{const{input:t}=await o.prompt([{type:"input",name:"input",message:i.fromString("merged branch name:")}]);m(`git merge --no-ff ${t}`)},c=async()=>{const{git:t}=await o.prompt([{type:"list",name:"git",message:i.fromString("please choose git commands"),choices:["git init","git branch","git checkout","git remote","git commit","git pull","git push","git merge --no-ff"]}]);if(!r.which("git"))return r.echo("Sorry, you need download git first"),r.exit(1);switch(t){case"git init":m(t);break;case"git branch":m(t);break;case"git checkout":f();break;case"git pull":m(t);break;case"git push":d();break;case"git commit":l();break;case"git remote":h();break;case"git merge --no-ff":y()}},n=new p;n.command("list").description("show a list of git commands").action(()=>{c()}),n.version("1.0.26").parse(process.argv);
